Description:

* Classes Tree and Node are types representing the corresponding logical entities.
* Class Main is a wrapper to test the Parallel DFS traversal function.
* The class 'MyCallableClass' implements the Callable interface (I initially used Runnable, but needed to return values, so used Callable)

The Tree:parallelDFSTraverse() function implements the concurrent DFS code, and works as follows:

* A new object of class MyCallableClass  is created and called
* This recursively calls the function MyCallableClass:auxParallelDFSTraverse() - Each recursive call is made in a new thread (from the thread pool generated by the ExecutorService object in class MyCallableClass.
* For each node, the thread waits for all parallel threads of its children to return, constructs the return list of the subtree (of which the given node is root) and then returns. This ensures that the traversalResult order is retained without using the parallel nature of execution